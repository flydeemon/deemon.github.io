<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[谓语动词]]></title>
      <url>https://flydeemon.github.io/2017/11/18/%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D/</url>
      <content type="html"><![CDATA[<h1 id="一、谓语动词的的四大“变态”含义"><a href="#一、谓语动词的的四大“变态”含义" class="headerlink" title="一、谓语动词的的四大“变态”含义"></a>一、谓语动词的的四大“变态”含义</h1><ul>
<li>【时态】动词随“时间”（现在、过去、将来、过去将来）、<br>  “状态”（一般、进行、完成、完成进行）的改变而发生的变态</li>
<li>【被动】表现“被动”含义的动词变态</li>
<li>【虚拟】“白纸黑字说假话”时的动词变态</li>
<li>【情态】表现各种“感情色彩”（如推测、命令、请求）的动词变态（情态助动词）</li>
</ul>
<h1 id="二、助动词的分类、含义、用法"><a href="#二、助动词的分类、含义、用法" class="headerlink" title="二、助动词的分类、含义、用法"></a>二、助动词的分类、含义、用法</h1><h2 id="do-类助动词："><a href="#do-类助动词：" class="headerlink" title="do 类助动词："></a>do 类助动词：</h2><ul>
<li>【成员】do，does，did</li>
<li>【含义】表示“一般”“现在”“过去”等含义，此外did， 还用来表示“虚拟”含义</li>
<li>【用法】do 类助词在陈述句中，往往和“实义动词”黏在一起，表示相应的时态含义 </li>
</ul>
<h2 id="will-类助动词："><a href="#will-类助动词：" class="headerlink" title="will 类助动词："></a>will 类助动词：</h2><ul>
<li>【成员】will，would</li>
<li>【含义】表示各种“将来”</li>
<li>【用法】will 类助动词后面紧跟的词要写成“原型”形式</li>
</ul>
<h2 id="have-类助动词："><a href="#have-类助动词：" class="headerlink" title="have 类助动词："></a>have 类助动词：</h2><ul>
<li>【成员】have，has， had</li>
<li>【含义】表示各种“完成”</li>
<li>【用法】have 类助动词后面紧跟的词要写成“过去分词”形式</li>
</ul>
<h2 id="be-类助动词："><a href="#be-类助动词：" class="headerlink" title="be 类助动词："></a>be 类助动词：</h2><ul>
<li>【成员】am，is，are，was，were</li>
<li>【含义&amp;用法】<br>  后面接“doing”，表示“进行”<br>  后面接“done”，表示“被动”</li>
</ul>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul>
<li>请写出 employ 的“过去将来完成进行时的被动语态的否定形式”</li>
<li>(did + will + not) + have + be + be + employ</li>
<li>would not have been being employed</li>
</ul>
<h1 id="三、时态-被动"><a href="#三、时态-被动" class="headerlink" title="三、时态 + 被动"></a>三、时态 + 被动</h1><p>谓语动词题满分秘密：</p>
<ol>
<li>题干：不设空的句子对空的作答具有决定的作用</li>
<li>选项：实义动词（这件事情）是一样的，关键看助动词在强调什么！</li>
</ol>
<h2 id="可以一句话解决的时态题"><a href="#可以一句话解决的时态题" class="headerlink" title="可以一句话解决的时态题"></a>可以一句话解决的时态题</h2><ul>
<li>一般现在时：“经常…”/“真的…”/“老做某事”<br>  （强调“永恒性”、“真实性”和“反复性”）</li>
<li>一般过去时：“当时…”<br>  （强调该动作“当时的时间、地点、人物、方式”）</li>
<li>现在完成时：“已经…”<br>  （不强调动作本身，只强调结果或影响）</li>
<li>过去完成时：发生在一个一般过去时动作之前的动作，需要找“参照物”<br>  （俗称过去的过去）</li>
</ul>
<h2 id="各种进行时："><a href="#各种进行时：" class="headerlink" title="各种进行时："></a>各种进行时：</h2><p>（复数名词后用动词原形）</p>
<ol>
<li>强调个时间点上动作的“正在”，“未完成”</li>
<li>表达强烈情感“总是”</li>
</ol>
<ul>
<li>现在完成进行时：一个动作到现在“进行了一段时间”或“已经做了一段时间而且还在做”</li>
<li>过去完成进行时：一个动作倒过去某一时间点为止“进行了一段时间”或“已经做了一段时间而且还在做”</li>
<li>一般将来时：</li>
</ul>
<ol>
<li>be going to do 强调主观计划准备做某事（打算做某事…）</li>
<li>will do 某事将会发生</li>
<li>be to do / be about to do 立刻、马上</li>
<li>祈使句 + and + you will （这样…/那么…）</li>
<li>祈使句 + or + you will （否则…）</li>
<li>“时间表”用一般现在时表将来</li>
<li>“位移动词”用现在进行时表将来<br> come; go; leave; arrive; begin; start; die</li>
<li>“时间从句、条件从句”的“主将从现”/“主情从现”/“主祈从现”</li>
</ol>
<h2 id="【虚拟语气十大常见考点】"><a href="#【虚拟语气十大常见考点】" class="headerlink" title="【虚拟语气十大常见考点】"></a>【虚拟语气十大常见考点】</h2><ol>
<li>But for + sth， + 主语 + 谓语虚拟<br> (要不是…)</li>
<li>Without + sth， + 主语 + 谓语虚拟<br> （要不是没有…）</li>
<li>If only + 主语 + 谓语虚拟<br> （要是…就好了！）</li>
<li>Would you mind + 主语 + 谓语虚拟<br> （您介不介意某人做某事？）</li>
<li>主句 + as if/as though + 主语 + 谓语虚拟<br> （就好像某人做了/要做某事）</li>
<li>主语A would rather + 主语B + 谓语虚拟<br> （宁愿、真希望…） </li>
<li>It’s high time that sb did/should do sth.<br> （到了某人做某事的时间了）</li>
<li>It is necessary that sb (should) do sth.<br> （某人真的有必要做某事）</li>
<li>It is + strange/surprising that sb should（竟然） do sth.<br> （真奇怪，他竟然…）</li>
<li>主语A + 坚持/命令/建议/要求 + (that) + 主语B + (should) do sth.</li>
</ol>
<ul>
<li>坚持：insist</li>
<li>命令：order，command （recommend 建议）</li>
<li>建议：advise，propose，suggest</li>
<li>要求：demand，require，request，ask</li>
</ul>
<h3 id="“虚拟语气”最常见考点：虚拟主从句"><a href="#“虚拟语气”最常见考点：虚拟主从句" class="headerlink" title="“虚拟语气”最常见考点：虚拟主从句"></a>“虚拟语气”最常见考点：虚拟主从句</h3><ul>
<li>虚拟主句 + 虚拟从句</li>
<li>真实主句 + 真实从句 （都是条件从句）</li>
<li>真实主句 + did = 虚拟主句</li>
<li>真实从句 + did = 虚拟从句</li>
</ul>
<h3 id="真实从句中：（主将从现原则）-gt-虚拟从句中："><a href="#真实从句中：（主将从现原则）-gt-虚拟从句中：" class="headerlink" title="真实从句中：（主将从现原则） -&gt; 虚拟从句中："></a>真实从句中：（主将从现原则） -&gt; 虚拟从句中：</h3><ul>
<li>过去：did -&gt; had done</li>
<li>现在：do -&gt; did/were</li>
<li>将来：will -&gt; should do/were to do</li>
</ul>
<h3 id="真实主句中：（主将从现原则）-gt-虚拟主句中："><a href="#真实主句中：（主将从现原则）-gt-虚拟主句中：" class="headerlink" title="真实主句中：（主将从现原则） -&gt; 虚拟主句中："></a>真实主句中：（主将从现原则） -&gt; 虚拟主句中：</h3><ul>
<li>过去：would do -&gt; would/could/should/might + have done</li>
<li>现在/将来 will do -&gt; would/could/should/might + do</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 英语 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[vue-热更新问题]]></title>
      <url>https://flydeemon.github.io/2017/09/05/vue-%E7%83%AD%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>最近调试 vue 项目遇到一个热更新的问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HMR] Update check failed: Error: Manifest request to </div><div class="line">/0ca55ad0f6c9c867e01c.hot-update.json timed out. </div><div class="line">at XMLHttpRequest.request.onreadystatechange </div><div class="line">(http://localhost:8080/app.js:39:22)</div></pre></td></tr></table></figure>
<p>这个问题是 webpack 更新版本导致的<br>webpack-dev-middleware: ^1.12.0 此模板没有Webpack 3的官方支持<br>所以要返回 “webpack-dev-middleware”: “~1.11.0”</p>
<p>并且注释</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+// compiler.plugin(&apos;compilation&apos;, function (compilation) &#123;</div><div class="line"> +//   compilation.plugin(&apos;html-webpack-plugin-after-emit&apos;, function (data, cb) &#123;</div><div class="line"> +//     hotMiddleware.publish(&#123; action: &apos;reload&apos; &#125;)</div><div class="line"> +//     cb()</div><div class="line"> +//   &#125;)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Node 记录]]></title>
      <url>https://flydeemon.github.io/2017/08/31/Node-%E8%AE%B0%E5%BD%95/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB 记录]]></title>
      <url>https://flydeemon.github.io/2017/08/31/MongoDB-%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="mongoDB-记录"><a href="#mongoDB-记录" class="headerlink" title="mongoDB 记录"></a>mongoDB 记录</h1><p>1.开启你的 mongodb 服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mongod -dbpath &quot;D:\Program Files\MongoDB\data\db&quot; 数据库路径</div><div class="line">-logpath &quot;D:\Program Files\MongoDB\data\log\MongoDB.log&quot; log的路径 </div><div class="line">-logappend 追加文件</div><div class="line">-serviceName &quot;MongoDB&quot; 服务名</div><div class="line">-auth 是否需要用户验证</div><div class="line">-install 安装服务</div></pre></td></tr></table></figure>
<p>2.连接 mongodb</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">shell&gt; mongo  默认链接本地数据库</div><div class="line"></div><div class="line">shell&gt; mongo://user:pwd@host:port/db 连接远程数据库</div></pre></td></tr></table></figure>
<p>3.mongoose.model 默认会帮你的集合名加复数形式(s)，所以你必须正确让 mongoose 认识你指定的集合名</p>
<p><code>new Schama({}, {collection: &#39;你的集合名&#39;})</code></p>
<p>or</p>
<p><code>schema.set(&#39;collection&#39;, &#39;actor&#39;)</code></p>
]]></content>
      
        <categories>
            
            <category> MongoDB </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[vue-cli 测试报错]]></title>
      <url>https://flydeemon.github.io/2017/08/25/vue-cli-test/</url>
      <content type="html"><![CDATA[<h1 id="关于-vue-cli-e2e-和-unit-测试报错的问题"><a href="#关于-vue-cli-e2e-和-unit-测试报错的问题" class="headerlink" title="关于 vue-cli e2e 和 unit 测试报错的问题"></a>关于 vue-cli e2e 和 unit 测试报错的问题</h1><p>1.<code>npm run e2e</code> 报错</p>
<ul>
<li>发现 <code>Error retrieving a new session from the selenium server</code> 的错误</li>
</ul>
<ul>
<li>解决办法: 更新 chromedriver, selenium-server</li>
</ul>
<p><code>npm install --save-dev chromedriver selenium-server</code></p>
<hr>
<p>2.<code>npm run unit</code> 报错</p>
<ul>
<li>发现类似这样的错误</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">WARN [plugin]: Error during loading &quot;karma-phantomjs-launcher&quot; plugin:</div><div class="line">	Path must be a string. Received null</div><div class="line">...</div><div class="line"></div><div class="line">WARN [launcher]: Can not load &quot;PhantomJS&quot;, it is not registered!</div><div class="line">	Perhaps you are missing some plugin?</div></pre></td></tr></table></figure>
<ul>
<li>解决办法: 安装 phantomjs-prebuilt</li>
</ul>
<p><code>npm install --save-dev phantomjs-prebuilt</code></p>
]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[vue-cli eslint 问题]]></title>
      <url>https://flydeemon.github.io/2017/08/16/vue-cli-eslint/</url>
      <content type="html"><![CDATA[<h1 id="关于-vue-cli-带给我们的困扰"><a href="#关于-vue-cli-带给我们的困扰" class="headerlink" title="关于 vue-cli 带给我们的困扰"></a>关于 vue-cli 带给我们的困扰</h1><p>vue-cli 自带的 eslint 配置的代码风格和我们平时使用的风格不一样</p>
<p>主要是两个：</p>
<ul>
<li>缩进是两个空格</li>
<li>在函数的括号前面必须有一个空格</li>
</ul>
<p>这样就会带给我们一些编码上的困扰，接下来我们来看如何解决它！</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>1.修改该文件 <code>.eslintrc.js</code>, 加入代码修改缩进为4个空格和修改函数的括号前面不需带空格</p>
<p><img src="pm1.png" alt="pic"></p>
<p>2.确保 <code>src</code> 下的文件缩进风格是 4 个 space (我的编辑器是 sublime)</p>
<p><img src="pm2.png" alt="pic"></p>
<h2 id="如果我不想使用-eslint-怎么办？"><a href="#如果我不想使用-eslint-怎么办？" class="headerlink" title="如果我不想使用 eslint 怎么办？"></a>如果我不想使用 eslint 怎么办？</h2><p>直接注释图下的代码， <code>build/webpack.base.conf.js</code> 路径下</p>
<p><img src="pm3.png" alt="pic"></p>
]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Web 离线缓存]]></title>
      <url>https://flydeemon.github.io/2017/04/20/Web-%E7%A6%BB%E7%BA%BF%E7%BC%93%E5%AD%98/</url>
      <content type="html"><![CDATA[<h1 id="一、H5之前如何实现存储"><a href="#一、H5之前如何实现存储" class="headerlink" title="一、H5之前如何实现存储"></a>一、H5之前如何实现存储</h1><h2 id="1-关于存储"><a href="#1-关于存储" class="headerlink" title="1.关于存储"></a>1.关于存储</h2><ul>
<li>cache</li>
<li>磁盘文件</li>
<li>数据库</li>
<li>内存</li>
</ul>
<h2 id="2-H5之前"><a href="#2-H5之前" class="headerlink" title="2.H5之前"></a>2.H5之前</h2><h3 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h3><ul>
<li>http请求头上会带着</li>
<li>大小4K（每个域名）</li>
<li>主Domain污染</li>
</ul>
<h3 id="UserData"><a href="#UserData" class="headerlink" title="UserData"></a>UserData</h3><ul>
<li>只有IE支持(5.0 – 9.0)</li>
<li>XML文件</li>
<li>64K</li>
</ul>
<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul>
<li>解决4K大小问题</li>
<li>解决请求头常带存储信息的问题</li>
<li>解决关系型存储的问题</li>
<li>跨浏览器</li>
</ul>
<h1 id="二、H5常见的存储方式"><a href="#二、H5常见的存储方式" class="headerlink" title="二、H5常见的存储方式"></a>二、H5常见的存储方式</h1><h2 id="1-localstorage-amp-amp-sessionstorage"><a href="#1-localstorage-amp-amp-sessionstorage" class="headerlink" title="1.localstorage &amp;&amp; sessionstorage"></a>1.localstorage &amp;&amp; sessionstorage</h2><ul>
<li>存储形式：key –&gt; value</li>
<li>过期：永久存储，永不失效，除非手动删除</li>
<li>大小：官方文档是每个域名5M</li>
</ul>
<h3 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h3><ul>
<li>getItem(key)</li>
<li>setItem(key, value)</li>
<li>removeItem(key)</li>
<li>key(index)</li>
<li>clear()</li>
</ul>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul>
<li>localstorage 是全局的</li>
<li>sessionstorage 是会话级别，当关闭标签会消失</li>
<li>都可以存数组、json、图片、脚本、样式文件</li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>使用前要判断浏览器是否支持（用window.localstorage和localstorage和.set()看是否报错)</li>
<li>写数据时，需要异常处理，避免超出容量抛错</li>
<li>避免把敏感的信息存入 localstorage</li>
<li>key 的唯一性</li>
<li>IOS 无痕浏览会停止存储</li>
</ul>
<h3 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h3><ul>
<li>存储更新策略，过期控制</li>
<li>子域名之间不能共享存储数据（借助 postMessage 跨域）</li>
<li>超出存储大小之后如何存储（LRU，FIFO算法）</li>
<li>server 端如何取到 (get,post请求)</li>
</ul>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul>
<li>利用本地数据，减少网络传输</li>
<li>弱网络环境下，高延迟，低带宽，尽量把数据本地化</li>
</ul>
<h2 id="2-IndexedDB-amp-amp-Web-SQL"><a href="#2-IndexedDB-amp-amp-Web-SQL" class="headerlink" title="2.IndexedDB &amp;&amp; Web SQL"></a>2.IndexedDB &amp;&amp; Web SQL</h2><ul>
<li>一种能在浏览器中持久地存储结构化数据的数据库，并且为 Web应用提供了丰富的查询能力</li>
<li>Web SQL：W3C已经不再支持</li>
</ul>
<h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p>IndexedDB 是安于命分配独立空间，一个独立域名下可以创建多个数据库，每个数据库可以创建多个对象存储空间（表），一个对象存储空间可以存储多个对象数据</p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>增删改查</li>
<li>事务</li>
<li>游标</li>
<li>索引</li>
</ul>
<h2 id="3-application-cache"><a href="#3-application-cache" class="headerlink" title="3.application cache"></a>3.application cache</h2><h3 id="什么是离线缓存（offline-application）"><a href="#什么是离线缓存（offline-application）" class="headerlink" title="什么是离线缓存（offline application）"></a>什么是离线缓存（offline application）</h3><p>它可以让 Web应用在离线的情况下继续使用，通过 manifest 文件知名需要缓存的资源</p>
<h3 id="检测是否在线"><a href="#检测是否在线" class="headerlink" title="检测是否在线"></a>检测是否在线</h3><p>navigator.onLine</p>
<h3 id="如何引用"><a href="#如何引用" class="headerlink" title="如何引用"></a>如何引用</h3><ul>
<li>在 HTML 页面中应用 manifest 文件 <code>&lt;html manifest=&quot;sample.appcache&quot;&gt;</code></li>
<li>在 apche 服务器中 conf 目录下 mime.type 文件添加  text/cache-manifest 标识</li>
</ul>
<h3 id="如何更新"><a href="#如何更新" class="headerlink" title="如何更新"></a>如何更新</h3><ul>
<li>如何有修改资源文件，必须通过修改 manifest 文件来刷新被缓存的文件列表</li>
</ul>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li>完全离线</li>
<li>资源被缓存，加载更快</li>
<li>减低 server 负载</li>
</ul>
<h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><ul>
<li>含有 manifest 属性的当前请求页无论如何都会被缓存</li>
<li>更新需要建立在 manifest 文件的更新，文件更新后是需要在此刷新（需要2此刷新才能获取新资源）</li>
<li>更新是全局性的，无法单独更新某个文件（无法单点更新）</li>
<li>对于链接的参数变化是敏感的，任何一个参数的修改都会被（master）重新缓存（重复缓存含参页面） index.html 和 index.html?renew=1 会被认为是不同的文件，分别缓存</li>
</ul>
<h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><ul>
<li>单地址的页面</li>
<li>对实时性要求不高的业务</li>
<li>离线 webapp</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[React 学习记录]]></title>
      <url>https://flydeemon.github.io/2017/04/20/React-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><p>1.使用 git 管理仓库</p>
<pre><code>git init
</code></pre><p>2.使用 npm 管理项目</p>
<pre><code>npm init
</code></pre><p>3.使用 react 库编写</p>
<pre><code>npm install --save-dev react react-dom
</code></pre><p>4.使用 ES2015 语法</p>
<pre><code>npm install --save-dev babel-core babel-loader babelify babel-preset-es2015 babel-preset-react
</code></pre><p>5.使用 webpack 构建模块</p>
<pre><code>npm install -g webpack webpack-dev-server
npm install --save-dev webpack webpack-dev-server
</code></pre><p>6.启动项目</p>
<pre><code>webpack 编译文件，需要在浏览器打开本地 index.html
webpack-dev-server --content-base --inline --hot 实时编译，浏览器地址 http://localhsot:8080
</code></pre><h1 id="二、React-笔记"><a href="#二、React-笔记" class="headerlink" title="二、React 笔记"></a>二、React 笔记</h1><p>1.组件中定义 this.xxx 时要在 super() 后定义</p>
<p>2.render 中的 this 指向当前类的实例</p>
<p>3.render 中的 this.props[xxx] 的值指向在组件类被调用的地方所赋的值</p>
<p>4.当在 render 中需要遍历时，Array.prototype.map() 需要为 html 元素设置唯一 key。可以使用 React.Children.map() 遍历组件中的子元素</p>
<p>5.组件类的类名首字母必须是大写，组件类只能包含一个顶层标签</p>
<p>6.JSX 语法中，标签中的 class 和 for 属性分别写成 className 和 htmlFor，否则会报错</p>
<p>7.在组件中的监听器需要都需要进行绑定 this.handle = this.handle.bind(this) 否则监听器中的 this 将指向 null</p>
<p>8.需要获取真实的标签节点需要 this.refs.xxx 并在组件中定义该属性 <code>&lt;div ref=&quot;xxx&quot;&gt;&lt;/div&gt;</code></p>
<p>9.在 ES6 中不需要重写 getInitialState() 直接在构造器中定义 this.state = xxx</p>
<p>10.区分 this.props 和 this.state，this.props 是一旦定义就不会发生改变；this.state 是与用户交互的状态，随时会改变</p>
]]></content>
      
        <categories>
            
            <category> react </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[React 开发中遇到的坑]]></title>
      <url>https://flydeemon.github.io/2017/03/12/%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<h1 id="警告：需要安装-prop-types-package"><a href="#警告：需要安装-prop-types-package" class="headerlink" title="警告：需要安装 prop-types package"></a>警告：需要安装 prop-types package</h1><p>这个是 React 的问题，最近官方更新 React 15.5.0 之后的版本都将弃用 React.PropTypes。<br>所以会提示让你安装 prop-types。详情去 React 官方的 release 查看。<br>如果你的项目中使用了第三方库，而那些库还没更新的情况下，最好的解决办法是：安装旧版本的 React 版本。<br>命令： npm install –save react@15.3.2 react-dom@15.3.2</p>
<p>如果你项目中并没有使用第三方库，那么就更新 React 版本并安装 prop-types 包。<br>命令： npm install –save react prop-types</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//项目中需要引入 prop-types</div><div class="line">import PropTypes from &apos;prop-types&apos;;</div><div class="line"></div><div class="line">const propTypes: &#123;</div><div class="line">    myArray: PropTypes.array,</div><div class="line">    myBool: PropTypes.bool,</div><div class="line">    myFunc: PropTypes.func,</div><div class="line">    myNumber: PropTypes.number,</div><div class="line">    myString: PropTypes.string,</div><div class="line">    requiredFunc: PropTypes.func.isRequired</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="webpack2-无法自动刷新或报错的问题"><a href="#webpack2-无法自动刷新或报错的问题" class="headerlink" title="webpack2 无法自动刷新或报错的问题"></a>webpack2 无法自动刷新或报错的问题</h1><p>这个其实是路径的问题。嘛，我来慢慢解释下吧。<br>首先，webpack-dev-server 运行的时候，会将编译好的文件存储在内存中，所以你运行这条命令的时候在项目中是找不到这个编译好的文件的。那么问题来了，index.html 中 script 标签是要引入这个编译好的文件的，那该怎么办？（这里我们把编译好的文件定义成: bundle.js）。<br>解决办法：</p>
<ul>
<li><p>第一个办法是 index.html 中 script 标签直接从项目的根目录引入 bundle.js 。</p>
<p>  <code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code></p>
<p>  这里有个前提，你的 index.html 必须在项目根目录下。比如 react_example -&gt; index.html 。</p>
</li>
<li><p>第二个办法是在 webpack.config.js 文件中指定 bundle.js 放在哪里。<br>  path：指定编译打包的路径，不是 html 中的 js 引用。<br>  publicPath：在内存中的虚拟目录。html 中引用 js 文件时，必须引用此虚拟路径（但实际上引用的是内存中的文件）。<br>  module.exports.output 中添加 publicPath 属性，该属性指定 bundle.js 文件放在 react_example/assets/ 中。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">output: &#123;</div><div class="line">    path: __dirname + &apos;/assets/&apos;,</div><div class="line">    filename: &apos;bundle.js&apos;,</div><div class="line">    publicPath: &apos;/assets/&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  然后修改index.html 中 script 标签</p>
<p>  <code>&lt;script src=&quot;assets/bundle.js&quot;&gt;&lt;/script&gt;</code></p>
</li>
</ul>
<p>接下来，<code>webpack-dev-server --content-base src --hot --inline</code> 报错的问题。<br>–content-base 参数是指：定义从哪个路径开始监听。后面的 src 如果不写默认就是 / ，也就是当前项目根目录下，如果你加了 src 就是 当前项目根目录下的 src 目录里。报错的原因就是这个，你的 index.html 是放在 src 中吗？<br>解决办法：<br>    先检查你的 index.html 是否放在 项目根目录下，如果不是，建议放在 项目根目录下。然后编写命令：<br>    <code>webpack-dev-server --content-base --inline --hot</code><br>    src 就不需要写了。默认从项目根目录开始监听。</p>
]]></content>
      
        <categories>
            
            <category> react </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://flydeemon.github.io/2017/03/11/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
