<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Web 离线缓存]]></title>
      <url>https://flydeemon.github.io/2017/04/20/Web-%E7%A6%BB%E7%BA%BF%E7%BC%93%E5%AD%98/</url>
      <content type="html"><![CDATA[<h1 id="一、H5之前如何实现存储"><a href="#一、H5之前如何实现存储" class="headerlink" title="一、H5之前如何实现存储"></a>一、H5之前如何实现存储</h1><h2 id="1-关于存储"><a href="#1-关于存储" class="headerlink" title="1.关于存储"></a>1.关于存储</h2><ul>
<li>cache</li>
<li>磁盘文件</li>
<li>数据库</li>
<li>内存</li>
</ul>
<h2 id="2-H5之前"><a href="#2-H5之前" class="headerlink" title="2.H5之前"></a>2.H5之前</h2><h3 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h3><ul>
<li>http请求头上会带着</li>
<li>大小4K（每个域名）</li>
<li>主Domain污染</li>
</ul>
<h3 id="UserData"><a href="#UserData" class="headerlink" title="UserData"></a>UserData</h3><ul>
<li>只有IE支持(5.0 – 9.0)</li>
<li>XML文件</li>
<li>64K</li>
</ul>
<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul>
<li>解决4K大小问题</li>
<li>解决请求头常带存储信息的问题</li>
<li>解决关系型存储的问题</li>
<li>跨浏览器</li>
</ul>
<h1 id="二、H5常见的存储方式"><a href="#二、H5常见的存储方式" class="headerlink" title="二、H5常见的存储方式"></a>二、H5常见的存储方式</h1><h2 id="1-localstorage-amp-amp-sessionstorage"><a href="#1-localstorage-amp-amp-sessionstorage" class="headerlink" title="1.localstorage &amp;&amp; sessionstorage"></a>1.localstorage &amp;&amp; sessionstorage</h2><ul>
<li>存储形式：key –&gt; value</li>
<li>过期：永久存储，永不失效，除非手动删除</li>
<li>大小：官方文档是每个域名5M</li>
</ul>
<h3 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h3><ul>
<li>getItem(key)</li>
<li>setItem(key, value)</li>
<li>removeItem(key)</li>
<li>key(index)</li>
<li>clear()</li>
</ul>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul>
<li>localstorage 是全局的</li>
<li>sessionstorage 是会话级别，当关闭标签会消失</li>
<li>都可以存数组、json、图片、脚本、样式文件</li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>使用前要判断浏览器是否支持（用window.localstorage和localstorage和.set()看是否报错)</li>
<li>写数据时，需要异常处理，避免超出容量抛错</li>
<li>避免把敏感的信息存入 localstorage</li>
<li>key 的唯一性</li>
<li>IOS 无痕浏览会停止存储</li>
</ul>
<h3 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h3><ul>
<li>存储更新策略，过期控制</li>
<li>子域名之间不能共享存储数据（借助 postMessage 跨域）</li>
<li>超出存储大小之后如何存储（LRU，FIFO算法）</li>
<li>server 端如何取到 (get,post请求)</li>
</ul>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul>
<li>利用本地数据，减少网络传输</li>
<li>弱网络环境下，高延迟，低带宽，尽量把数据本地化</li>
</ul>
<h2 id="2-IndexedDB-amp-amp-Web-SQL"><a href="#2-IndexedDB-amp-amp-Web-SQL" class="headerlink" title="2.IndexedDB &amp;&amp; Web SQL"></a>2.IndexedDB &amp;&amp; Web SQL</h2><ul>
<li>一种能在浏览器中持久地存储结构化数据的数据库，并且为 Web应用提供了丰富的查询能力</li>
<li>Web SQL：W3C已经不再支持</li>
</ul>
<h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p>IndexedDB 是安于命分配独立空间，一个独立域名下可以创建多个数据库，每个数据库可以创建多个对象存储空间（表），一个对象存储空间可以存储多个对象数据</p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>增删改查</li>
<li>事务</li>
<li>游标</li>
<li>索引</li>
</ul>
<h2 id="3-application-cache"><a href="#3-application-cache" class="headerlink" title="3.application cache"></a>3.application cache</h2><h3 id="什么是离线缓存（offline-application）"><a href="#什么是离线缓存（offline-application）" class="headerlink" title="什么是离线缓存（offline application）"></a>什么是离线缓存（offline application）</h3><p>它可以让 Web应用在离线的情况下继续使用，通过 manifest 文件知名需要缓存的资源</p>
<h3 id="检测是否在线"><a href="#检测是否在线" class="headerlink" title="检测是否在线"></a>检测是否在线</h3><p>navigator.onLine</p>
<h3 id="如何引用"><a href="#如何引用" class="headerlink" title="如何引用"></a>如何引用</h3><ul>
<li>在 HTML 页面中应用 manifest 文件 <code>&lt;html manifest=&quot;sample.appcache&quot;&gt;</code></li>
<li>在 apche 服务器中 conf 目录下 mime.type 文件添加  text/cache-manifest 标识</li>
</ul>
<h3 id="如何更新"><a href="#如何更新" class="headerlink" title="如何更新"></a>如何更新</h3><ul>
<li>如何有修改资源文件，必须通过修改 manifest 文件来刷新被缓存的文件列表</li>
</ul>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li>完全离线</li>
<li>资源被缓存，加载更快</li>
<li>减低 server 负载</li>
</ul>
<h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><ul>
<li>含有 manifest 属性的当前请求页无论如何都会被缓存</li>
<li>更新需要建立在 manifest 文件的更新，文件更新后是需要在此刷新（需要2此刷新才能获取新资源）</li>
<li>更新是全局性的，无法单独更新某个文件（无法单点更新）</li>
<li>对于链接的参数变化是敏感的，任何一个参数的修改都会被（master）重新缓存（重复缓存含参页面） index.html 和 index.html?renew=1 会被认为是不同的文件，分别缓存</li>
</ul>
<h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><ul>
<li>单地址的页面</li>
<li>对实时性要求不高的业务</li>
<li>离线 webapp</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[React 学习记录]]></title>
      <url>https://flydeemon.github.io/2017/04/20/React-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><p>1.使用 git 管理仓库</p>
<pre><code>git init
</code></pre><p>2.使用 npm 管理项目</p>
<pre><code>npm init
</code></pre><p>3.使用 react 库编写</p>
<pre><code>npm install --save-dev react react-dom
</code></pre><p>4.使用 ES2015 语法</p>
<pre><code>npm install --save-dev babel-core babel-loader babelify babel-preset-es2015 babel-preset-react
</code></pre><p>5.使用 webpack 构建模块</p>
<pre><code>npm install -g webpack webpack-dev-server
npm install --save-dev webpack webpack-dev-server
</code></pre><p>6.启动项目</p>
<pre><code>webpack 编译文件，需要在浏览器打开本地 index.html
webpack-dev-server --content-base --inline --hot 实时编译，浏览器地址 http://localhsot:8080
</code></pre><h1 id="二、React-笔记"><a href="#二、React-笔记" class="headerlink" title="二、React 笔记"></a>二、React 笔记</h1><p>1.组件中定义 this.xxx 时要在 super() 后定义</p>
<p>2.render 中的 this 指向当前类的实例</p>
<p>3.render 中的 this.props[xxx] 的值指向在组件类被调用的地方所赋的值</p>
<p>4.当在 render 中需要遍历时，Array.prototype.map() 需要为 html 元素设置唯一 key。可以使用 React.Children.map() 遍历组件中的子元素</p>
<p>5.组件类的类名首字母必须是大写，组件类只能包含一个顶层标签</p>
<p>6.JSX 语法中，标签中的 class 和 for 属性分别写成 className 和 htmlFor，否则会报错</p>
<p>7.在组件中的监听器需要都需要进行绑定 this.handle = this.handle.bind(this) 否则监听器中的 this 将指向 null</p>
<p>8.需要获取真实的标签节点需要 this.refs.xxx 并在组件中定义该属性 <code>&lt;div ref=&quot;xxx&quot;&gt;&lt;/div&gt;</code></p>
<p>9.在 ES6 中不需要重写 getInitialState() 直接在构造器中定义 this.state = xxx</p>
<p>10.区分 this.props 和 this.state，this.props 是一旦定义就不会发生改变；this.state 是与用户交互的状态，随时会改变</p>
]]></content>
      
        <categories>
            
            <category> react </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[React 开发中遇到的坑]]></title>
      <url>https://flydeemon.github.io/2017/03/12/%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<h1 id="警告：需要安装-prop-types-package"><a href="#警告：需要安装-prop-types-package" class="headerlink" title="警告：需要安装 prop-types package"></a>警告：需要安装 prop-types package</h1><p>这个是 React 的问题，最近官方更新 React 15.5.0 之后的版本都将弃用 React.PropTypes。<br>所以会提示让你安装 prop-types。详情去 React 官方的 release 查看。<br>如果你的项目中使用了第三方库，而那些库还没更新的情况下，最好的解决办法是：安装旧版本的 React 版本。<br>命令： npm install –save-dev react@15.3.2 react-dom@15.3.2</p>
<p>如果你项目中并没有使用第三方库，那么就更新 React 版本并安装 prop-types 包。<br>命令： npm install –save-dev react prop-types</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//项目中需要引入 prop-types</div><div class="line">import PropTypes from &apos;prop-types&apos;;</div><div class="line"></div><div class="line">const propTypes: &#123;</div><div class="line">    myArray: PropTypes.array,</div><div class="line">    myBool: PropTypes.bool,</div><div class="line">    myFunc: PropTypes.func,</div><div class="line">    myNumber: PropTypes.number,</div><div class="line">    myString: PropTypes.string,</div><div class="line">    requiredFunc: PropTypes.func.isRequired</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="webpack2-无法自动刷新或报错的问题"><a href="#webpack2-无法自动刷新或报错的问题" class="headerlink" title="webpack2 无法自动刷新或报错的问题"></a>webpack2 无法自动刷新或报错的问题</h1><p>这个其实是路径的问题。嘛，我来慢慢解释下吧。<br>首先，webpack-dev-server 运行的时候，会将编译好的文件存储在内存中，所以你运行这条命令的时候在项目中是找不到这个编译好的文件的。那么问题来了，index.html 中 script 标签是要引入这个编译好的文件的，那该怎么办？（这里我们把编译好的文件定义成: bundle.js）。<br>解决办法：</p>
<ul>
<li><p>第一个办法是 index.html 中 script 标签直接从项目的根目录引入 bundle.js 。</p>
<p>  <code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code></p>
<p>  这里有个前提，你的 index.html 必须在项目根目录下。比如 react_example -&gt; index.html 。</p>
</li>
<li><p>第二个办法是在 webpack.config.js 文件中指定 bundle.js 放在哪里。<br>  module.exports.output 中添加 publiPath 属性，该属性指定 bundle.js 文件放在 react_example/assets/ 中。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">output: &#123;</div><div class="line">    path: __dirname + &apos;/assets/&apos;,</div><div class="line">    filename: &apos;bundle.js&apos;,</div><div class="line">    publicPath: &apos;/assets/&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  然后修改index.html 中 script 标签</p>
<p>  <code>&lt;script src=&quot;assets/bundle.js&quot;&gt;&lt;/script&gt;</code></p>
</li>
</ul>
<p>接下来，<code>webpack-dev-server --content-base src --hot --inline</code> 报错的问题。<br>–content-base 参数是指：定义从哪个路径开始监听。后面的 src 如果不写默认就是 / ，也就是当前项目根目录下，如果你加了 src 就是 当前项目根目录下的 src 目录里。报错的原因就是这个，你的 index.html 是放在 src 中吗？<br>解决办法：<br>    先检查你的 index.html 是否放在 项目根目录下，如果不是，建议放在 项目根目录下。然后编写命令：<br>    <code>webpack-dev-server --content-base --inline --hot</code><br>    src 就不需要写了。默认从项目根目录开始监听。</p>
]]></content>
      
        <categories>
            
            <category> react </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://flydeemon.github.io/2017/03/11/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
